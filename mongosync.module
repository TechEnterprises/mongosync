<?php
/**
 * @file
 * Controls the syncing of Drupal entities to MongoDB collections.
 */

use Drupal\mongosync\MongoDBEntity;
include 'mongosync.api.inc';

/**
 * Implements hook_permission().
 */
function mongosync_permission() {
  return array(
    'administer mongosync' => array(
      'title' => t('Administer Mongosync'),
    ),
  );
}

/**
 * Impliments hook_menu()
 */
function mongosync_menu() {
  $items['admin/config/mongosync'] = array(
    'title' => 'Mongosync',
    'description' => 'Configure Entity -> MongoDB Collection syncing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mongosync_admin_form'),
    'access arguments' => array('administer mongosync'),
    'file' => 'mongosync.admin.inc',
  );

  return $items;
}

/**
 * Creates and returns a new MongoDBEntity object.
 */
function mongosync_new_mongodbentity() {
return new MongoDBEntity(
    \Drupal::config('mongosync.settings')->get('mongosync_host'),
    \Drupal::config('mongosync.settings')->get('mongosync_db'),
    \Drupal::config('mongosync.settings')->get('mongosync_user'),
    \Drupal::config('mongosync.settings')->get('mongosync_pwd')
  );
}

/**
 * Checks to see if entity sync is enabled for the given entity.
 *
 * @param string $entity_name
 *   Machine name of entity that should be checked.
 * @param string $entity_bundle
 *   Machine name of bundle that should be checked.
 */
function mongosync_is_enabled($entity_name, $entity_bundle) {
  return \Drupal::config('mongosync.settings')->get('mongosync_entity_' . $entity_name . '_bundle_' . $entity_bundle . '_sync') ? TRUE : FALSE;
}

/**
 * Fetches and returns the collection name assigned to the given entity.
 *
 * @param string $entity_name
 *   Machine name of entity for which a collection name should be fetched.
 * @param string $entity_bundle
 *   Machine name of bundle for which a collection name should be fetched.
 */
function mongosync_get_entity_collection($entity_name, $entity_bundle) {
  $collection = \Drupal::config('mongosync.settings')->get('mongosync_entity_' . $entity_name . '_bundle_' . $entity_bundle . '_collection');

  if (!$collection) {
    $collection = $entity_name;
  }

  return $collection;
}


/**
 * Impliments hook_entity_insert().
 */
function mongosync_entity_insert($entity) {
  // Extract entity IDs and bundle.
  $bundle = $entity->bundle();
  $id = $entity->id();
  $type = $entity->getEntityTypeId();

  if (mongosync_is_enabled($type, $bundle)) {
    // Load collection for entity.
    $collection = mongosync_get_entity_collection($type, $bundle);

    // Invoke processsing hooks.
    $entity = \Drupal::moduleHandler()->invokeAll('mongosync_entity_insert_preprocess', [$entity, $type, $bundle]);

    // Create new instance of MongoDBEntity.
    $mongo = mongosync_new_mongodbentity();

    // Create entity in MongoDB.
    $mongo->createEntities(array($entity), $collection);
  }
}

/**
 * Impliments hook_entity_delete()
 */
function mongosync_entity_delete($entity) {
  // Extract entity IDs and bundle.
  $bundle = $entity->bundle();
  $id = $entity->id();
  $type = $entity->getEntityTypeId();

  if (mongosync_is_enabled($type, $bundle)) {
    // Invoke processsing hooks.
    $entity = \Drupal::moduleHandler()->invokeAll('mongosync_entity_delete_preprocess', [$entity, $type, $bundle]);

    // Fetch the collection.
    $collection = mongosync_get_entity_collection($type, $bundle);

    // Create new instance of MongoDBEntity.
    $mongo = mongosync_new_mongodbentity();
    $mongo->deleteEntity($id, $collection);
  }
}

/**
 * Impliments hook_entity_update()
 */
function mongosync_entity_update($entity, $type) {
  mongosync_entity_delete($entity, $type);
  mongosync_entity_insert($entity, $type);
}
